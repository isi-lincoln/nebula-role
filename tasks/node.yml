- name: Set FQDN for each host
  set_fact:
    local_fqdn: "{{ inventory_hostname }}.{{ nebula_fqdn }}"

- name: Get lighthouse keys from localhost
  copy:
    src: "{{key_location}}/{{ local_fqdn }}.{{ item }}"
    dest: /opt/nebula/{{ local_fqdn }}.{{ item }}
  loop:
    - crt
    - key

- name: Get ca cert from localhost
  copy:
    src: "{{key_location}}/ca.crt"
    dest: /opt/nebula/ca.crt



#- name: Ensure lighthouse has hosts file entry for node
#  lineinfile:
#    path: /etc/hosts
#    line: "{{ nebula_internal_ip_addr }} {{ local_fqdn }}"
#  delegate_to: "{{ nebula_lighthouses_inventory[0] }}"
#  when: nebula_lighthouse_build_hosts_file

- name: Ensure node has hosts file entry for lighthouse
  lineinfile:
    path: /etc/hosts
    line: "{{ nebula_lighthouse_internal_ip_addr }} {{ nebula_lighthouse_hostname }}.{{ nebula_fqdn }}"
  when: nebula_node_lighthouse_in_hosts_file

#- name: Read cert/key from lighthouse
#  slurp:
#    src: "/opt/nebula/{{ local_fqdn }}"
#  register: lighthouse_files
#  delegate_to: "{{ nebula_lighthouses_inventory[0] }}"
#  with_items: 
#    - "{{ local_fqdn }}.crt"
#    - "{{ local_fqdn }}.key"
#    - ca.crt
#
#- name: Ensure Cert, Key, CA files exist
#  copy:
#    dest: "/opt/nebula/{{ item['item'] }}"
#    content: "{{ item['content'] | b64decode }}"
#    owner: root
#    group: root
#    mode: 0600
#  loop: "{{ lighthouse_files.results }}"
#  loop_control:
#    label: "{{ item['item'] }}"

- name: Ensure Nebula is configured
  template:
    src: node_config.yml.j2 
    dest: /opt/nebula/config.yml
    owner: root
    group: root
    mode: '0400'
  notify: restart nebula

- name: Ensure Nebula service exists
  template:
    src: node.service.j2
    dest: /etc/systemd/system/nebula.service
    owner: root
    group: root
    mode: '0644'

- name: Ensure Nebula service is enabled and running
  systemd: 
    name: nebula
    daemon_reload: yes
    enabled: yes
    masked: no
    state: started

- name: Ensure nebula-check is present
  template:
    src: nebula-check.sh.j2
    dest: /opt/nebula/nebula-check.sh
    owner: root
    group: root
    mode: '0755'
  when: nebula_install_check_cron|bool

- name: Ensure nebula-check is scheduled via cron
  cron:
    name: "nebula-check"
    minute: "{{ nebula_check_cron_minute | default('*/5') }}"
    job: "/opt/nebula/nebula-check.sh"
  when: nebula_install_check_cron|bool

- name: Add systemd-networkd template for using overlay dns
  template:
    src: nebula_dns.network.j2
    dest: /etc/systemd/network/{{ nebula_interface_name }}.network
    owner: root
    group: root
    mode: '0644'

- name: Restart systemd-networkd to get our dns resolution
  service:
    name: systemd-networkd
    state: restarted
